#!/usr/bin/env ruby
#title           :war_pi
#description     :This application will set up your interface and start kismet services
#author		 	 :p4nT4N30
#date            :20161007
#version         :1.0
#usage		     :bash (sudo) wardrivingpi [options]
#notes           :war driving is fun, drink while war walking but not while driving!!!
#####################################################################################

require "optparse"

module WarDrivingPi
  $argv = ARGV
  $options = {}
  class Application
    def run(argv)
      parse_options(argv)
      banner
      puts ""
      if optionsValidation
        configinterface($options[:interface])
        configkismet($options[:interface])
        startkismetserver
      end
    end #end run

    def parse_options(argv)
      OptionParser.new do |opts|
        opts.banner = "Usage: sudo wardrivingpi [options]"

        opts.on("-h","--help","Prints this help page") do
          puts opts
          $options[:help] = '1'
          exit
        end #end help
        opts.on("-V","--Version","Displays version and date of release") do
          puts "Version: 1.0"
          puts "Release Date: 10/9/2016"
          exit
        end #end Version
        opts.on("-c","--check-system","check to see current system setting for kismet") do
          puts "I am checking to see what the current kismet and interface settings are."
          puts ""

          exit
        end #end check-system
        opts.on("-i","--interface=Interface","Interface") do |i|
          $options[:interface] = i
        end #end interface
        opts.on("-p","--prefix=Prefix","log file prefix") do |p|
          $options[:prefix] = p
        end #end prefix
        opts.on("-c","--client","Start the Kismet client") do
          $options[:client] = "1"
        end #end client
      end.parse! #end OptionsParser
    end #end parse_options

    def optionsValidation()
      if $options[:interface].nil?
        puts "Try again, please!"
        puts
        puts "You must supply the -i <interface> option.  With out this kismet doesn't know what to do!"
        puts
        puts "Run: wardrivingpi -h for help"
        exit
      else
        r = true
      end
      if $options[:prefix].nil?
        puts "you did not enter a prefix. the default prefix will be used"
      end

      if r == true
        return true
      end
    end #end optionsValidation

    def banner
      puts ""
      puts "War Driving is FUN!!!!"
      puts "       Dont Drink While War Driving but do drink while war walking"
      puts "War Driving is FUN!!!!"
      puts ""
      puts ""
      puts "██████╗ ██╗  ██╗███╗   ██╗████████╗██╗  ██╗███╗   ██╗██████╗  ██████╗ "
      sleep 1
      puts "██╔══██╗██║  ██║████╗  ██║╚══██╔══╝██║  ██║████╗  ██║╚════██╗██╔═████╗"
      sleep 1
      puts "██████╔╝███████║██╔██╗ ██║   ██║   ███████║██╔██╗ ██║ █████╔╝██║██╔██║"
      sleep 1
      puts "██╔═══╝ ╚════██║██║╚██╗██║   ██║   ╚════██║██║╚██╗██║ ╚═══██╗████╔╝██║"
      sleep 1
      puts "██║          ██║██║ ╚████║   ██║        ██║██║ ╚████║██████╔╝╚██████╔╝"
      sleep 1
      puts "╚═╝          ╚═╝╚═╝  ╚═══╝   ╚═╝        ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝ "
      sleep 1
      puts ""
    end #end banner
    def configinterface(input)
      system "ifconfig #{input} down"
      system "iwconfig #{input} mode monitor"
      system "ifconfig #{input} up"
      puts "Interface #{input} is now in monitor mode."
      puts ""
    end #end configinterface
    def configkismet(input)
      #$filename = '/usr/local/etc/kismet.conf' #raspbian
      $filename = '/etc/kismet/kismet.conf' #ubuntugnome 16.04
      $text =  File.read($filename)
      File.open($filename,"r") do |f|
        f.each_line do |line|
          if line =~ /^ncsource=*/
            $curncsource = line
            File.write($filename, $text.gsub(/#{$curncsource}/, "ncsource=#{input}\n"))
          end
        end
      end
      puts "The kismet.conf file has been updated with the correct ncsource."
      puts ""
    end #end configkismet
    def startkismetserver
      if $options[:prefix].nil?
        $options[:prefix] = "wardrivingpi"
      end
      $kPID = spawn("kismet_server -t #{$options[:prefix]}", :out=>"/dev/null" )
      puts "Kismet_server is now running as a background job! PID=#{$kPID}"
    end #end startkismetserver
    def checksystem()

    end #end checksystem
  end #end class Application

end #end the module

o=WarDrivingPi::Application.new

o.run($argv)
